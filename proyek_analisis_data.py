# -*- coding: utf-8 -*-
"""Proyek Analisis Data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XnAxsFst9bF6zNuUAksw_gRkQxSh7bEM

# Proyek Analisis Data: [Input Nama Dataset]
- **Nama:** Abdullah Hikmatyar Priandika
- **Email:** priandika181003@gmail.com
- **ID Dicoding:** ahikmatyar18

## Menentukan Pertanyaan Bisnis

- Daerah mana uang memiliki kualitas udara paling baik dan paling buruk selama periode 2013 hingga 2017?
- Bagaimana hubungan antara TEMP, WSPM, PRES, & DEWP dengan tingkat kualitas udara?
- Bagaimana variasi kualitas udara berdasarkan tahun, bulan, hari, & jam?

## Import Semua Packages/Library yang Digunakan
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import calendar
from datetime import datetime

"""## Data Wrangling

### Gathering Data
"""

# Siapkan Dataset
df1 = pd.read_csv("/content/sample_data/PRSA_Data_Aotizhongxin.csv")
df2 = pd.read_csv("/content/sample_data/PRSA_Data_Changping.csv")
df3 = pd.read_csv("/content/sample_data/PRSA_Data_Dingling.csv")
df4 = pd.read_csv("/content/sample_data/PRSA_Data_Dongsi.csv")
df5 = pd.read_csv("/content/sample_data/PRSA_Data_Guanyuan.csv")
df6 = pd.read_csv("/content/sample_data/PRSA_Data_Gucheng.csv")
df7 = pd.read_csv("/content/sample_data/PRSA_Data_Huairou.csv")
df8 = pd.read_csv("/content/sample_data/PRSA_Data_Nongzhanguan.csv")
df9 = pd.read_csv("/content/sample_data/PRSA_Data_Shunyi.csv")
df10 = pd.read_csv("/content/sample_data/PRSA_Data_Tiantan.csv")
df11 = pd.read_csv("/content/sample_data/PRSA_Data_Wanliu.csv")
df12 = pd.read_csv("/content/sample_data/PRSA_Data_Wanshouxigong.csv")

# menggabungkan semua data set menjadi satu
df_AQI = pd.concat([df1, df2, df3, df4, df5, df6, df7, df8, df9, df10, df11, df12], axis=0)
df_AQI = df_AQI.reset_index() # memberikan index/no baru
df_AQI

# menghapus kolom yang tidak di perlukan
df_AQI = df_AQI.drop('No', axis=1 )
df_AQI.head() # menampilkan 5 baris pertama

# Menambahkan kolom baru datetime (kolom year,month, day)
df_AQI['datetime'] = df_AQI.apply(lambda row: datetime(row['year'], row['month'], row['day']), axis=1) # menggabungkan 3 kolom menjadi kolom datetime

df_datetime = df_AQI['datetime']
df_AQI.drop('datetime', axis=1, inplace=True)
df_AQI.insert(0, 'datetime', df_datetime)

df_AQI.head()

# Mengganti isi data kolom month

df_AQI['month']= df_AQI['month'].map({1: 'Jan', 2: 'Feb', 3: 'Mar', 4: 'Apr', 5: 'May', 6: 'Jun', 7: 'Jul', 8: 'Aug', 9: 'Sep', 10: 'Oct', 11: 'Nov', 12: 'Dec'})

# Mengganti isi data kolom hour

def number_to_hour(hour_number):
  return f'{hour_number:02}:00'

list_jam = [number_to_hour(hour_number) for hour_number in df_AQI['hour']]

df_AQI['hour'] = list_jam

# Mengganti isi data kolom day
def number_to_day(number):
  day_number = (number  - 1) % 7
  return calendar.day_name[day_number]

df_AQI['day'] = df_AQI['day'].apply(number_to_day)

# Menambah nama setiap kolom dengan "kolom_"
df_AQI = df_AQI.add_prefix('kolom_')

kolom = ["kolom_year", "kolom_month", "kolom_day", "kolom_hour"]
df_AQI[kolom]= df_AQI[kolom].astype("category")

"""### Assessing Data

Memeriksa tipe data df_AQI
"""

df_AQI.info()

"""Memeriksa Missing Value"""

df_AQI.isna().sum()

print(f'Jumlah duplikasi data pada df_Nongzhanguan: {df_AQI.duplicated().sum()}')

df_AQI.describe()

"""### Cleaning Data

Menangani missing value
"""

df_AQI.isna().sum()

df_AQI.dropna(subset=["kolom_WSPM", "kolom_wd", "kolom_RAIN", "kolom_DEWP", "kolom_PRES", "kolom_TEMP"], axis=0, inplace=True) # Mengahapus kolom yang yang memiliki nilai kosong

# Mengganti nilai kolom yang kosong dengan nilai mean
name_kolom = ["kolom_PM2.5", "kolom_PM10", "kolom_SO2","kolom_NO2", "kolom_O3"]

for kolom in name_kolom:
  mean_kolom = df_AQI[kolom].mean()
  df_AQI[kolom].fillna(mean_kolom, axis=0, inplace=True)

# Mengganti nilai kolom yang kosong dengan nilai median
median_value = df_AQI["kolom_CO"].median()
df_AQI["kolom_CO"].fillna(median_value, axis=0, inplace=True)

df_AQI.isna().sum()

"""## Exploratory Data Analysis (EDA)

### Explore ...
"""

#Menampilkan parameter statistik data dari semua kolom
df_AQI.describe(include='all')

"""clustering kualitas udara berdasarkan beberapa faktor-faktor  **(PM25, PM10, SO2, NO2, CO, O3)** pada dataset"""

# batasan/standard setiap faktor untuk menentukan kualitas udara
def tentukan_kualitas_udara(PM25, PM10, SO2, NO2, CO, O3):
    standar = {
        'PM25': [(0, 12), (12, 35), (35, float('inf'))],
        'PM10': [(0, 50), (50, 100), (100, float('inf'))],
        'SO2': [(0, 20), (20, 100), (100, float('inf'))],
        'NO2': [(0, 40), (40, 100), (100, float('inf'))],
        'CO': [(0, 1000), (1000, 5000), (5000, float('inf'))],
        'O3': [(0, 100), (100, 180), (180, float('inf'))]
    }

    # Fungsi untuk menentukan kualitas udara
    def tentukan_kualitas(nilai, parameter):
        for kualitas, batas in enumerate(standar[parameter], start=1):
            if isinstance(batas, tuple):
                if batas[0] <= nilai < batas[1]:
                    return kualitas
            else:
                if nilai == batas:
                    return kualitas
        return 3  # Jika tidak ada yang cocok, maka kualitas dianggap "Buruk"

    # Menentukan kualitas untuk setiap parameter dengan mengonversi ke float
    kualitas_PM25 = tentukan_kualitas(float(PM25), 'PM25')
    kualitas_PM10 = tentukan_kualitas(float(PM10), 'PM10')
    kualitas_SO2 = tentukan_kualitas(float(SO2), 'SO2')
    kualitas_NO2 = tentukan_kualitas(float(NO2), 'NO2')
    kualitas_CO = tentukan_kualitas(float(CO), 'CO')
    kualitas_O3 = tentukan_kualitas(float(O3), 'O3')

    # Menghitung rata-rata dari nilai-nilai kualitas
    rata_rata_kualitas = (kualitas_PM25 + kualitas_PM10 + kualitas_SO2 + kualitas_NO2 + kualitas_CO + kualitas_O3) / 6

    if rata_rata_kualitas < 2:  # Misalnya, jika rata-rata kurang dari 2, dianggap "Baik"
        return 'Baik'
    elif rata_rata_kualitas < 2.5:  # Jika rata-rata antara 2 dan 2.5, dianggap "Sedang"
        return 'Sedang'
    else:
        return 'Buruk'


df_AQI['kualitas_udara'] = df_AQI.apply(
    lambda row: tentukan_kualitas_udara(
        row['kolom_PM2.5'],
        row['kolom_PM10'],
        row['kolom_SO2'],
        row['kolom_NO2'],
        row['kolom_CO'],
        row['kolom_O3']
    ),
    axis=1
)
df_AQI['kualitas_udara'] = df_AQI.kualitas_udara.astype('category') #untuk mengganti tipe data menjadi category

df_AQI.sample(20)

df_AQI.kualitas_udara.value_counts()

"""Dari output di atas dapat di ketahui bahwa nilai dominan dari kolom kualitas_udara adalah Baik

membuat kolom yang berisi nilai dari kualitas udara, jika buruk=-1, sedang=0, dan baik=1.
"""

df_AQI["index_AQI"] = df_AQI["kualitas_udara"]
df_AQI["index_AQI"] = df_AQI["index_AQI"].map({"Baik": 1, "Sedang": 0, "Buruk": -1})
df_AQI["index_AQI"] = df_AQI["index_AQI"].astype("int")

df_AQI.info() # Menampilkan jumblah data dan type data

"""### 1.Cek Data Parameter

cek data pameter statistik kolom_PM2.5, kolom_PM10, kolom_SO2, kolom_NO2, kolom_CO, kolom_O3 berdasarkan kualitas udara
"""

df_AQI.groupby(by= "kualitas_udara").agg({
    "kolom_PM2.5": ["max", "min", "mean"],
    "kolom_PM10" : ['max', 'min', 'mean'],
    "kolom_SO2" : ['max', 'min', 'mean'],
    "kolom_NO2" : ['max', 'min', 'mean'],
    "kolom_CO" : ['max', 'min', 'mean'],
    "kolom_O3" : ['max', 'min', 'mean'],
})

"""Berdasarkan hasil tersebut di dapatkan informasi bahwa, baris baik pada kolom kualitas_udara memiliki nilai mean yang relatif lebih rendah jika di bandingkan baris lain. Jika di kelompokkan berdasarkan nilai mean dari yang terkecil
1. baik
2. sedang
3. buruk

cek data pameter statistik kolom_PM2.5, kolom_PM10, kolom_SO2, kolom_NO2, kolom_CO, kolom_O3 berdasarkan tempat stasiun
"""

df_AQI.groupby(by= "kolom_station").agg({
    "kolom_PM2.5": ["max", "min", "mean"],
    "kolom_PM10" : ['max', 'min', 'mean'],
    "kolom_SO2" : ['max', 'min', 'mean'],
    "kolom_NO2" : ['max', 'min', 'mean'],
    "kolom_CO" : ['max', 'min', 'mean'],
    "kolom_O3" : ['max', 'min', 'mean'],
})

"""Berdasarkan hasil tersebut di dapatkan hasil bahwa


*   Daerah Dingling, Huairou, dan Changping memeiliki nilai mean terendah
*   Daerah Nongzhanguan, Gucheng, dan Wanliu memiliki nilai mean tertinggi

cek data pameter statistik kolom_PM2.5, kolom_PM10, kolom_SO2, kolom_NO2, kolom_CO, kolom_O3 berdasarkan tahun
"""

df_AQI.groupby(by= "kolom_year").agg({
    "kolom_PM2.5": ["max", "min", "mean", "count"],
    "kolom_PM10" : ['max', 'min', 'mean'],
    "kolom_SO2" : ['max', 'min', 'mean'],
    "kolom_NO2" : ['max', 'min', 'mean'],
    "kolom_CO" : ['max', 'min', 'mean'],
    "kolom_O3" : ['max', 'min', 'mean'],
})

"""Keterangan:


*   PM2.5 (Partikel Matter 2.5 Mikrometer): rata-rata paling sedikit pada tahun 2016 dan paling banyak 2017
*   PM10 (Partikel Matter 10 Mikrometer): rata-rata paling sedikit pada tahun 2016 dan paling banyak 2014

*   SO2 (Dioksida Belerang): rata-rata paling sedikit pada tahun 2016 dan paling banyak 2014

*   NO2 (Dioksida Nitrogen): rata-rata paling sediki pada tahun 2016 dan paling banyak 2014

*   CO (Karbon Monoksida): rata-rata paling sedikit pada tahun 2016 dan paling banyak 2017

* O3 (Ozon): rata-rata paling sedikit pada tahun 2017 dan paling banyak 2015

cek data pameter statistik kolom_PM2.5, kolom_PM10, kolom_SO2, kolom_NO2, kolom_CO, kolom_O3 berdasarkan bulan
"""

df_AQI.groupby(by= "kolom_month").agg({
    "kolom_PM2.5": ["max", "min", "mean", "count"],
    "kolom_PM10" : ['max', 'min', 'mean'],
    "kolom_SO2" : ['max', 'min', 'mean'],
    "kolom_NO2" : ['max', 'min', 'mean'],
    "kolom_CO" : ['max', 'min', 'mean'],
    "kolom_O3" : ['max', 'min', 'mean'],
})

"""Berdasarkan hasil tersebut di dapatkan hasil bahwa


*   Bulan Agustus, Juli, & Juni memeiliki nilai mean terendah
*   Bulan januari, Desember, & Maret memiliki nilai mean tertinggi

cek data pameter statistik kolom_PM2.5, kolom_PM10, kolom_SO2, kolom_NO2, kolom_CO, kolom_O3 berdasarkan hari
"""

df_AQI.groupby(by= "kolom_day").agg({
    "kolom_PM2.5": ["max", "min", "mean", "count"],
    "kolom_PM10" : ['max', 'min', 'mean'],
    "kolom_SO2" : ['max', 'min', 'mean'],
    "kolom_NO2" : ['max', 'min', 'mean'],
    "kolom_CO" : ['max', 'min', 'mean'],
    "kolom_O3" : ['max', 'min', 'mean']
})

"""Berdasarkan hasil tersebut di dapatkan hasil bahwa

* Hari Selasa, Senin & Rabu memeiliki nilai mean terendah
* hari Minggu, Kamis & Sabtu memiliki nilai mean tertinggi

cek data pameter statistik kolom_PM2.5, kolom_PM10, kolom_SO2, kolom_NO2, kolom_CO, kolom_O3 berdasarkan jam
"""

df_AQI.groupby(by= "kolom_hour").agg({
    "kolom_PM2.5": ["max", "min", "mean", "count"],
    "kolom_PM10" : ['max', 'min', 'mean'],
    "kolom_SO2" : ['max', 'min', 'mean'],
    "kolom_NO2" : ['max', 'min', 'mean'],
    "kolom_CO" : ['max', 'min', 'mean'],
    "kolom_O3" : ['max', 'min', 'mean']
})

"""Berdasarkan hasil tersebut di dapatkan hasil bahwa

* Jam 06:00, 05:00 & 04:00 memeiliki nilai mean terendah
* Jam 21:00, 20:00 & 22:00 memiliki nilai mean tertinggi

### 2. Cek kualitas udara

Cek kualitas udara berdasarkan tempat stasiun
"""

df_AQI.groupby(by= "kolom_station").agg({
    "kualitas_udara": "value_counts"
})

"""Berdasarkan hasil tersebut di dapatkan hasil bahwa

* kualitas udara baik paling banyak berada di daerah Dingling, dan paling sedikit berada di daerah Gucheng
* Kualitas udara sedang paling banyak berada di daerah Gucheng, dan paling sedikit berada di daerah Dingling
* Kualitas udara buruk paling banyak berada di daerah Nongzhanguan, dan paling sedikit berada di daerah Dingling

Cek kualitas udara berdasarkan tahun
"""

df_AQI.groupby(by= "kolom_year").agg({
    "kualitas_udara": "value_counts"
})

"""Berdasarkan hasil tersebut di dapatkan hasil bahwa

* kualitas udara baik paling banyak di tahun 2016, dan paling sedikit di tahun 2017
* Kualitas udara sedang paling banyak di tahun 2014 dan paling sedikit di tahun 2017
* Kualitas udara buruk paling banyak di tahun 2014, dan paling sedikit di tahun 2017

Cek kualitas udara berdasarkan bulan
"""

df_AQI.groupby(by= "kolom_month").agg({
    "kualitas_udara": "value_counts"
})

"""Berdasarkan hasil tersebut di dapatkan hasil bahwa

* kualitas udara baik paling banyak di bulan Agustus, dan paling sedikit di bulan januari
* Kualitas udara sedang paling banyak di bulan Maret dan paling sedikit di bulan Agustus
* Kualitas udara buruk paling banyak di bulan Desember, dan paling sedikit di bulan Agustus

Cek kualitas udara berdasarkan hari
"""

df_AQI.groupby(by= "kolom_day").agg({
    "kualitas_udara": "value_counts"
})

"""Berdasarkan hasil tersebut di dapatkan hasil bahwa

* kualitas udara baik paling banyak di hari Kamis, dan paling sedikit di hari Minggu
* Kualitas udara sedang paling banyak di hari Senin dan paling sedikit di hari Jumat
* Kualitas udara buruk paling banyak di hari Senin, dan paling sedikit di hari Jumat

Cek kualitas udara berdasarkan jam
"""

df_AQI.groupby(by= "kolom_hour").agg({
    "kualitas_udara": "value_counts"
})

"""### 3. Cek TEMP, WSPM, PRES, DEWP

Cek berdasarkan udara
"""

df_AQI.groupby(by= "kualitas_udara").agg({
    "kolom_TEMP": ['max', 'min', 'mean'],
    "kolom_PRES" : ['max', 'min', 'mean'],
    "kolom_DEWP" : ['max', 'min', 'mean'],
    "kolom_WSPM" : ['max', 'min', 'mean']
})

"""Berdasarkan hasil di atas dapat disimpulkan, Kualitas udara akan semakin baik saat TEMP naik, PRES turun, DEWP naik, & WSPM naik. sedangkan sebaliknya kualitas udara akan semakin menurun saat TEMP turun, PRES naik, DEWP turun, & WSPM turun

Cek berdasarkan tahun
"""

df_AQI.groupby(by= "kolom_year").agg({
    "kolom_TEMP": ['max', 'min', 'mean'],
    "kolom_PRES" : ['max', 'min', 'mean'],
    "kolom_DEWP" : ['max', 'min', 'mean'],
    "kolom_WSPM" : ['max', 'min', 'mean']
})

"""Cek berdasarkan bulan"""

df_AQI.groupby(by= "kolom_month").agg({
    "kolom_TEMP": ['max', 'min', 'mean'],
    "kolom_PRES" : ['max', 'min', 'mean'],
    "kolom_DEWP" : ['max', 'min', 'mean'],
    "kolom_WSPM" : ['max', 'min', 'mean']
})

"""Cek berdasarkan hari"""

df_AQI.groupby(by= "kolom_day").agg({
    "kolom_TEMP": ['max', 'min', 'mean'],
    "kolom_PRES" : ['max', 'min', 'mean'],
    "kolom_DEWP" : ['max', 'min', 'mean'],
    "kolom_WSPM" : ['max', 'min', 'mean']
})

"""Cek berdasarkan jam"""

df_AQI.groupby(by= "kolom_hour").agg({
    "kolom_TEMP": ['max', 'min', 'mean'],
    "kolom_PRES" : ['max', 'min', 'mean'],
    "kolom_DEWP" : ['max', 'min', 'mean'],
    "kolom_WSPM" : ['max', 'min', 'mean']
})

"""## Visualization & Explanatory Analysis

### 1. Daerah mana yang memiliki kualitas udara terbaik & terandah dari rentang waktu 2013 sampai 2017?
"""

daerah_df = df_AQI.groupby("kolom_station").index_AQI.sum().sort_values(ascending=False).reset_index() #membuat dataframe yang berisi index_AQI berdasarkan tempat station

#membuat subplot grid
fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(24, 6))

#membuat template color untuk visualisasi
colors1 = ["#00FF00" , "#D3D3D9", "#D3D3D9", "#D3D3D9", "#D3D3D9"]
colors2 = ["#1E90FF" , "#D3D3D9", "#D3D3D9", "#D3D3D9", "#D3D3D9"]

#membuat barplot dengan inisialisasi ax[0]
sns.barplot(x="index_AQI", y="kolom_station", data=daerah_df.head(5), palette=colors1, ax=ax[0])
ax[0].set_ylabel(None)
ax[0].set_xlabel(None)
ax[0].set_title("Best Air Quality Index (AQI)", loc="center", fontsize=15)
ax[0].tick_params(axis ='y', labelsize=12)

#membuat barplot dengan inisialisasi ax[1]
sns.barplot(x="index_AQI", y="kolom_station", data=daerah_df.sort_values(by="index_AQI", ascending=True).head(5), palette=colors2, ax=ax[1])
ax[1].set_ylabel(None)
ax[1].set_xlabel(None)
ax[1].invert_xaxis()
ax[1].yaxis.set_label_position("right")
ax[1].yaxis.tick_right()
ax[1].set_title("Worst Air Quality Index (AQI)", loc="center", fontsize=15)
ax[1].tick_params(axis='y', labelsize=12)

plt.suptitle("Best & Worst Air Quality Index (AQI)", fontsize=20) #membuat main title
plt.show()

"""### 2. Bagaimanah pengaruh TEMP, WSPM, PRES, & DEWP terhadap kualitas udara?"""

df_AQI["kolom_PRES"] = df_AQI["kolom_PRES"].apply(lambda x: x*0.02953) #untuk mengkonversi satuan hPa menjadi satuan inHg

# Membuat dataframe baru berisi nilai mean berdasarkan kualitas udara
df_mean = df_AQI.groupby(by="kualitas_udara").agg({
    "kolom_TEMP": ['mean'],
    "kolom_PRES" : ['mean'],
    "kolom_DEWP" : ['mean'],
    "kolom_WSPM" : ['mean']
})
df_mean #menampilkan isi data

#mentranspose dataframe agar mempermudah dalam visualisasi
df_mean = df_mean.T
df_mean #Menmpilkan isi data

species = ("TEMP", "PRES", "DEWP", "WSPM") #membuat tuple untuk label attribute visualisasi

#mengatur posisi, lebar, & jarak setiap bar
x = np.arange(len(species))
width = 0.25
multiplier = 1

fig, ax = plt.subplots(layout='constrained') #membuat subplot grid

#looping untuk mengisi subplot grid dengan plots
for attribute, measurement in df_mean.items():
    offset = width * multiplier
    rects = ax.bar(x + offset, measurement, width, label=attribute)
    ax.bar_label(rects, padding=4, rotation=30)
    multiplier += 1

# Menambah text, title,& label
ax.set_ylabel('mean')
ax.set_title('Pengaruh TEMP, WSPM, PRES, & DEWP')
ax.set_xticks(x + width, species)
ax.legend(loc='upper left', ncols=4)
ax.set_ylim(-2, 45)
bbox_props = dict(boxstyle='round, pad=0.5', edgecolor='black', facecolor='white', lw=2)
plt.text(0.03, -0.07, 'Keterangan satuan\n\nTEMP: c(celcius)\nPRES: inHg(inci raksa)\nDEWP: c(celcius)\nWSPM: mph (mil per jam) ',
         fontsize=12, color='black', bbox=bbox_props, transform=plt.gcf().transFigure)

plt.show()

"""### 3. Bagaimana kualitas udara berdasarkan tahun, bulan, hari, & jam"""

cat_var=["kolom_year", "kolom_month", "kolom_day", "kolom_hour"] #membuat list untuk label attribute visualisasi

# Membuat subplot grid
fig, ax= plt.subplots(nrows= 2, ncols= int(len(cat_var)/2), figsize= (25,9))

# Membuat main title
plt.suptitle('Countplots trends categorical independent variables'.upper(), fontsize= 20, fontweight= 20, y= 0.99)

# Looping untuk mengisi subplot grid dengan plots
k= 0
for i in range(2):
    for j in range(int(len(cat_var)/2)):
        sns.barplot(y= df_AQI.groupby(by= cat_var[k]).index_AQI.sum(),
                    x= df_AQI.groupby(by= cat_var[k]).mean(numeric_only=True).index, ax= ax[i,j], palette= 'viridis')


        ax[i,j].set_title(f'{cat_var[k].upper()}', fontsize= 15)
        ax[i,j].set_ylabel('')
        ax[i,j].set_xlabel('')
        k+=1

plt.tight_layout()
plt.show()

"""## Conclusion

* Pertanyaan 1: Dingling memiliki kualitas udara terbaik, diikuti oleh Huairou & Changping. Sedangkan Nongzhangua memiliki kualitas udara terendah, diikuti oleh Gucheng & Wanliu.

* Pertanyaan 2: Kualitas udara meningkat seiring dengan naiknya TEMP, WSPM, & DEWP. Namun, kualitas udara menurun dengan naiknya PRES.

* pertanyaan 3: Kualitas udara tertinggi terdapat pada tahun 2016
"""

#mengekspor dataset yang sudah di berishkan
df_AQI.to_csv("df_AQI.csv", index=False )